////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright 2017 Alexander Stukowski
//
//  This file is part of OVITO (Open Visualization Tool).
//
//  OVITO is free software; you can redistribute it and/or modify it either under the
//  terms of the GNU General Public License version 3 as published by the Free Software
//  Foundation (the "GPL") or, at your option, under the terms of the MIT License.
//  If you do not alter this notice, a recipient may use your version of this
//  file under either the GPL or the MIT License.
//
//  You should have received a copy of the GPL along with this program in a
//  file LICENSE.GPL.txt.  You should have received a copy of the MIT License along
//  with this program in a file LICENSE.MIT.txt
//
//  This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND,
//  either express or implied. See the GPL or the MIT License for the specific language
//  governing rights and limitations.
//
////////////////////////////////////////////////////////////////////////////////////////

// ospray
/*#include "math/vec.ih"
#include "math/box.ih"
#include "common/Ray.ih"
#include "common/Model.ih"
#include "geometry/Geometry.ih"
#include "math/sampling.ih"
#include "ospray/OSPDataType.h"
#include "safe_gather.ih"*/
#include "common/Ray.ih"
#include "geometry/Geometry.ih"
#include "common/Data.ih"
#include "math/vec.ih"
#include "math/box.ih"
//#include "safe_gather.ih"

struct Cones {
  /*! inherit from "Geometry" class: */
  Geometry   super;

  /*! data array that contains the cone data (possibly but not
      necessarily including the color, which could be in color);
      most offset and stride values point into here.  */
  Data1D center;
  Data1D axis;
  Data1D radius;
  Data1D texcoord;
  float global_radius;



    /*uint8     *data;
    int32      stride;
    int        offset_center;
    int        offset_axis;
    int        offset_radius;
    int        offset_materialID;
    int        offset_colorID;

    float      radius;
    float      epsilon;

    int        materialID;

    uint8     *color;
    int        color_stride;
    int        color_offset;
    int        color_format;

    vec2f     *texcoord;
    bool       huge_mesh;*/
};
/*
inline int32 Cones_getMaterialID(const uniform Cones *uniform self, int32 primID)
{
  int32 materialID = -1;
  if (self->offset_materialID >= 0) {
    const uniform int32 primsPerPage = (1024*1024*64);
    if (any(primID >= primsPerPage )) {
      const int primPageID  = primID / primsPerPage;
      const int localPrimID = primID % primsPerPage;
      foreach_unique (primPage in primPageID) {
        uniform uint8 *uniform pagePtr = self->data
          + (((int64)primPage)
             * primsPerPage
             * self->stride);
        uniform uint8 *varying conePtr = pagePtr + self->stride*localPrimID;
        materialID = *((uniform uint32 *varying)(conePtr+self->offset_materialID));
      }
    } else {
      uniform uint8 *varying conePtr = self->data + self->stride*primID;
      materialID = *((uniform uint32 *varying)(conePtr+self->offset_materialID));
    }
  } else {
    materialID = self->materialID;
  }
  return materialID;
}*/

static void Cones_postIntersect( const Geometry *uniform geometry,
                                  varying DifferentialGeometry &dg,
                                  const varying Ray &ray,
                                  uniform int64 flags)
{
  uniform Cones *uniform self = (uniform Cones *uniform)geometry;

  dg.Ng = dg.Ns = ray.Ng;

  float radius = get_float(self->radius, ray.primID);
  if (valid(self->radius))
    radius = get_float(self->radius, ray.primID);
  //uint8 * conePtr = self->data + self->stride*((int64)ray.primID);
  //float radius =
  //  (self->offset_radius >= 0) ? *((float *)(conePtr + self->offset_radius)) : self->radius;

  // make epsilon large enough to not get lost when computing
  // |CO| = |center-ray.org| ~ radius for 2ndary rays
  dg.epsilon = radius * (1e4f * ulpEpsilon);

if (and(flags & DG_TEXCOORD, valid(self->texcoord))){
    dg.st = get_vec2f(self->texcoord, ray.primID);
}
  else
    dg.st = make_vec2f(0.0f);

}

export void *uniform Cones_create(void *uniform cppEquivalent)
{
    uniform Cones *uniform self = uniform new uniform Cones;
    Geometry_Constructor(&self->super,cppEquivalent,Cones_postIntersect);
    Data1D_Constructor(&self->center);
    Data1D_Constructor(&self->axis);
    Data1D_Constructor(&self->radius);
    Data1D_Constructor(&self->texcoord);
    self->global_radius =0.01;
    return self;
}

unmasked void Cones_bounds(const RTCBoundsFunctionArguments *uniform args)
{
  uniform Cones *uniform self = (uniform Cones *uniform)args->geometryUserPtr;
  uniform int primID = args->primID;
  /*uniform uint8 *uniform conePtr = self->data + self->stride*((uniform int64)primID);
  uniform bool offr = self->offset_radius >= 0;
  uniform float radius =
    offr ? *((uniform float *uniform)(conePtr+self->offset_radius)) :
    self->radius;
  uniform vec3f axis =
    *((uniform vec3f*uniform)(conePtr+self->offset_axis));
  radius = max(radius, length(axis));
  uniform vec3f center =
    *((uniform vec3f*uniform)(conePtr+self->offset_center));*/
    uniform float radius = valid(self->radius) ? get_float(self->radius, primID)
                                               : self->global_radius;
    uniform vec3f center = get_vec3f(self->center, primID);
    uniform vec3f axis = get_vec3f(self->axis, primID);
    radius = max(radius, length(axis));

    box3fa *uniform out = (box3fa *uniform)args->bounds_o;
  *out = make_box3fa(center - radius, center + radius);
}

void Cones_intersect_kernel(const RTCIntersectFunctionNArguments *uniform args, const uniform bool isOcclusionTest)
{
  // make sure to set the mask
  if (!args->valid[programIndex]) return;

  uniform Cones *uniform self = (uniform Cones *uniform)args->geometryUserPtr;
  uniform unsigned int primID = args->primID;

  // this assumes that the args->rayhit is actually a pointer to a varying ray!
  varying Ray *uniform ray = (varying Ray *uniform)args->rayhit;

/*  uniform uint8 *uniform conePtr = self->data + self->stride*((uniform int64)primID);
  uniform float radius = self->radius;
  if (self->offset_radius >= 0) {
    radius = *((uniform float *uniform)(conePtr+self->offset_radius));
  }*/
  //uniform vec3f center = *((uniform vec3f*uniform)(conePtr+self->offset_center));
  //uniform vec3f axis = *((uniform vec3f*uniform)(conePtr+self->offset_axis));

    uniform float radius = valid(self->radius) ? get_float(self->radius, primID)
                                               : self->global_radius;
    uniform vec3f center = get_vec3f(self->center, primID);
    uniform vec3f axis = get_vec3f(self->axis, primID);

  uniform float height = length(axis);
  uniform float angle = atan(radius / height);
  uniform float cos_angle = cos(angle);
  uniform float sin_angle = sin(angle);
  uniform float cosSqr = sqr(cos_angle);
  float AdD = dot(axis, ray->dir) / height;
  vec3f E = ray->org - center;
  float AdE = dot(axis, E) / height;
  float DdE = dot(ray->dir, E);
  float EdE = dot(E, E);
  float c2 = AdD*AdD - cosSqr;
  float c1 = AdD*AdE - cosSqr*DdE;
  float c0 = AdE*AdE - cosSqr*EdE;
  // Solve the quadratic. Keep only those X for which dot(A,X-V) >= 0.
  bool hit = false;

  const float epsilon = 1e-9f;
  if(abs(c2) >= epsilon) {
    float discr = sqr(c1) - c0*c2;
    if(discr < -epsilon) {
      // Q(t) = 0 has no real-valued roots.  The line does not
      // intersect the double-sided cone.
    }
    else if(discr > epsilon) {
      // Q(t) = 0 has two distinct real-valued roots.  However, one or
      // both of them might intersect the portion of the double-sided
      // cone "behind" the vertex.  We are interested only in those
      // intersections "in front" of the vertex.
      float root = sqrt(discr);
      float t = (-c1 - root) / c2;
      E = ray->org + t * ray->dir - center;
      float ddot = dot(E, axis);
      if(ddot > 0.f && ddot < sqr(height) && t > ray->t0 && t < ray->t) {
        ray->t = t;
        hit = true;
      }
      t = (-c1 + root) / c2;
      vec3f E2 = ray->org + t * ray->dir - center;
      ddot = dot(E2, axis);
      if(ddot > 0.f && ddot < sqr(height) && t > ray->t0 && t < ray->t) {
        ray->t = t;
        E = E2;
        hit = true;
      }
    }
    else {
      // One repeated real root (line is tangent to the cone).
      float t = -(c1/c2);
      if(t > ray->t0 && t < ray->t) {
        E = ray->org + t * ray->dir - center;
        if(dot(E, axis) > 0.f) {
          ray->t = t;
          hit = true;
        }
      }
    }
  }
  else if(abs(c1) >= epsilon) {
    // c2 = 0, c1 != 0 (D is a direction vector on the cone boundary)
    float t = - (0.5f*c0/c1);
    if(t > ray->t0 && t < ray->t) {
      E = ray->org + t * ray->dir - center;
      if(dot(E, axis) > 0.f) {
        ray->t = t;
        hit = true;
      }
    }
  }
  else if(abs(c0) >= epsilon) {
      // c2 = c1 = 0, c0 != 0
  }
  else if(DdE > ray->t0 && DdE < ray->t) {
    // c2 = c1 = c0 = 0, cone contains ray V+t*D where V is cone vertex
    // and D is the line direction.
    ray->t = DdE;
    hit = true;
  }
  if(hit) {
    if (isOcclusionTest) {
      ray->t = neg_inf;
    } else {
      ray->primID = primID;
      //ray->geomID = self->super.geomID;
        ray->geomID = args->geomID;
      ray->instID = args->context->instID[0];
      vec3f axis_var = axis;
      ray->Ng = safe_normalize(cross(E, cross(E, axis_var)));
    }
  }
}

unmasked void Cones_intersect(const struct RTCIntersectFunctionNArguments *uniform args)
{
  Cones_intersect_kernel(args,false);
}

unmasked void Cones_occluded(const struct RTCIntersectFunctionNArguments *uniform args)
{
  Cones_intersect_kernel(args,true);
}

/*int32 Cones_getMaterialID(const Geometry *uniform const _self, const int32 primID)
{
  const Cones *const uniform self = (const Cones *uniform)_self;
  return Cones_getMaterialID(self, primID);
}*/


export void Cones_finalize(void *uniform _self,
                              void *uniform _embreeGeometry,
                              const Data1D *uniform center,
                              const Data1D *uniform radius,
                              const Data1D *uniform texcoord,
                              const Data1D *uniform axis,
                              uniform float global_radius)
{

    // first, typecast to our 'real' type. since ispc can't export real
    // types to c we have to pass 'self' in as a void*, and typecast
    // here.
    Cones *uniform self = (Cones * uniform) _self;


    // set our internal data.
    self->center = *center;
    self->radius = *radius;
    self->texcoord = *texcoord;
    self->axis = *axis;
    self->super.numPrimitives = center->numItems;
    self->global_radius = global_radius;


    RTCGeometry geom = (RTCGeometry)_embreeGeometry;

    // set 'us' as user data (this will be the first arg in intersect()
    // and computebounds() callbacks
    rtcSetGeometryUserData(geom, self);
    // set function pointers:
    rtcSetGeometryBoundsFunction(
            geom, (uniform RTCBoundsFunction)&Cones_bounds, self);
    rtcSetGeometryIntersectFunction(
            geom, (uniform RTCIntersectFunctionN)&Cones_intersect);
    rtcSetGeometryOccludedFunction(
            geom, (uniform RTCOccludedFunctionN)&Cones_occluded);
    rtcCommitGeometry(geom);

}

/*
export void ConesGeometry_set(void  *uniform _self
    , void *uniform _model
    , void *uniform data
    , void *uniform materialList
    , vec2f *uniform texcoord
    , void *uniform color
    , uniform int color_offset
    , uniform int color_stride
    , uniform int color_format
    , uniform int numCones
    , uniform int bytesPerCone
    , uniform float radius
    , uniform int materialID
    , uniform int offset_center
    , uniform int offset_axis
    , uniform int offset_radius
    , uniform int offset_materialID
    , uniform int offset_colorID
    , uniform bool huge_mesh
    )
{
  uniform Cones *uniform self = (uniform Cones *uniform)_self;
  uniform Model *uniform model = (uniform Model *uniform)_model;

  RTCGeometry geom = rtcNewGeometry(ispc_embreeDevice(),RTC_GEOMETRY_TYPE_USER);
  uniform uint32 geomID = rtcAttachGeometry(model->embreeSceneHandle,geom);

  self->super.model = model;
  self->super.geomID = geomID;
  self->super.numPrimitives = numCones;
  self->super.materialList = (Material **)materialList;
  self->texcoord = texcoord;
  self->color = (uint8 *uniform)color;
  self->color_stride = color_stride;
  self->color_offset = color_offset;
  self->color_format = color_format;
  self->radius = radius;
  self->data = (uint8 *uniform)data;
  self->materialID = materialID;
  self->stride = bytesPerCone;

  self->offset_center     = offset_center;
  self->offset_axis       = offset_axis;
  self->offset_radius     = offset_radius;
  self->offset_materialID = offset_materialID;
  self->offset_colorID    = offset_colorID;

  self->epsilon = log(self->radius);
  if (self->epsilon < 0.f)
    self->epsilon = -1.f/self->epsilon;

  self->huge_mesh = huge_mesh;

  rtcSetGeometryUserData(geom, self);
  rtcSetGeometryUserPrimitiveCount(geom, numCones);
  rtcSetGeometryBoundsFunction(geom,(uniform RTCBoundsFunction)&Cones_bounds, self);
  rtcSetGeometryIntersectFunction(geom,(uniform RTCIntersectFunctionN)&Cones_intersect);
  rtcSetGeometryOccludedFunction(geom,(uniform RTCOccludedFunctionN)&Cones_occluded);
  rtcCommitGeometry(geom);
  rtcReleaseGeometry(geom);
}*/